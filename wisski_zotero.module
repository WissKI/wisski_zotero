<?php
// $ID$

/** 
* Initialize and ask the triple store to handle the endpoint request
*
* @author Mark Fichtner
*
*/
function wisski_zotero_endpoint_serve() {

  // get the ap id
  $id = variable_get('wisski_zotero_ap', -1);
  
  // When was the last call? if it was more than 10 minutes, delete the TS
  $version = variable_get('wisski_zotero_version', time());
  
  // get the config for the Zotero API           
  $userID = variable_get('wisski_zotero_userid', '');
  $apiKey = variable_get('wisski_zotero_apikey', '');
  $user = variable_get('wisski_zotero_user', 0);
  if($user == 0)
    $user = "users";
  else
    $user = "groups";
  
  // get the store from the access point module
  $store = wisski_accesspoint_get($id,'endpoint');

  // drop the old data
  $minutes = variable_get('wisski_zotero_minutes', 10);
  if($version < (time() - ($minutes*60))) {
    $store->drop();
    variable_set('wisski_zotero_version', time());
  }
   
  // load the current data
  $query = 'LOAD <https://api.zotero.org/' . $user . '/' . $userID . '/items?key=' . $apiKey . '&content=rdf_zotero>';
  $store->query($query);
 
  // get the config of the store
  $config = $store->a;

  // get the endpoint features for a usual user
  $config['endpoint_features'] = _wisski_endpoint_access_verbs();
          
  /* instantiation */
  $ep = ARC2::getStoreEndpoint($config);
              
  if (!$ep->isSetUp()) {  // should
    $ep->setUp(); /* create MySQL tables */
  }
              
  /* request handling */
  $ep->go();
 
}

/**
 * Admin formular for the zotero settings
 *
 * @author Mark Fichtner
 *
 */
function wisski_zotero_admin_settings() {
  $form = array();
  
  $form['wisski_zotero_user'] = array(
    '#type' => 'select',
    '#title' => t('Access type'),
    '#description' => t('Is the Zotero-library a user-library or a group-library?'),
    '#default_value' => variable_get('wisski_zotero_user', 0),
    '#options' => array(t('User'),t('Group')),
  );

  
  $form['wisski_zotero_userid'] = array(
    '#type' => 'textfield',
    '#title' => t('UserID'),
    '#description' => t('What is the ID of the Zotero-user or group?'),
    '#default_value' => variable_get('wisski_zotero_userid', ''),
  );
  
  $form['wisski_zotero_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Zotero API-Key'),
    '#description' => t('What is the APIkey for the access of the Zotero library?'),
    '#default_value' => variable_get('wisski_zotero_apikey', ''),
  );
  
  $form['wisski_zotero_minutes'] = array(
    '#type' => 'textfield',
    '#title' => t('Data reset'),
    '#description' => t('After how many minutes should the data be refetched from the Zotero-Server?'),
    '#default_value' => variable_get('wisski_zotero_minutes', 10),
  );

  return system_settings_form($form);

  
  return $form;
}


/**
 * Call to hook_menu
 *
 * @author Mark Fichtner
 *
 */
function wisski_zotero_menu() {

  $items['wisski/zoteroendpoint'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'SparQL Endpoint',
    'page callback' => 'wisski_zotero_endpoint_serve',
    'access callback' => TRUE,
    'access callback' => '_wisski_endpoint_check_access',
//    'file' => 'wisski_endpoint.inc',
  );
  $items['admin/settings/wisski/zoteroendpoint'] = array(
    'title' => 'Zotero Endpoint',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_zotero_admin_settings'),
    'access arguments' => array('wisski administrate endpoint'),
//    'file' => 'wisski_endpoint.inc',
  );
                                                    
  return $items;                                                     
}
                                                      
                            
                                                